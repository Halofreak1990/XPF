//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.UIElementSpecs
{
    using Machine.Specifications;

    using Moq;
    using Moq.Protected;

    using RedBadger.Xpf.Adapters.Xna.Graphics;
    using RedBadger.Xpf.Controls;
    using RedBadger.Xpf.Graphics;

    public abstract class a_UIElement
    {
        protected const string ArrangeOverride = "ArrangeOverride";

        protected const string MeasureOverride = "MeasureOverride";

        protected static readonly Size AvailableSize = new Size(100, 100);

        protected static readonly Size DesiredSize = new Size(100, 100);

        protected static readonly Size FinalSize = new Size(100, 100);

        protected static Mock<UIElement> Subject;

        private Establish context = () => Subject = new Mock<UIElement> { CallBase = true };
    }

    public abstract class a_Measured_UIElement : a_UIElement
    {
        protected const string VisualOffset = "VisualOffset";

        private Establish context = () =>
            {
                Subject.Protected().Setup<Size>(MeasureOverride, ItExpr.Is<Size>(size => size.Equals(AvailableSize))).
                    Returns(DesiredSize);
                Subject.Object.Measure(AvailableSize);
            };
    }

    public abstract class a_Measured_and_Arranged_UIElement : a_Measured_UIElement
    {
        private Establish context = () =>
            {
                Subject.Protected().Setup<Size>(ArrangeOverride, ItExpr.IsAny<Size>()).Returns(FinalSize);
                Subject.Object.Arrange(new Rect(FinalSize));
            };
    }

    public abstract class a_UIElement_in_a_RootElement : a_UIElement
    {
        protected static Mock<Renderer> Renderer;

        protected static Mock<RootElement> RootElement;

        private Establish context = () =>
            {
                var viewPort = new Rect(new Point(30, 40), AvailableSize);

                Renderer = new Mock<Renderer>(new Mock<ISpriteBatch>().Object, new Mock<IPrimitivesService>().Object)
                    {
                       CallBase = true 
                    };

                RootElement = new Mock<RootElement>(viewPort, Renderer.Object) { CallBase = true };
                RootElement.Object.Content = Subject.Object;
            };
    }

    public abstract class a_collapsed_measured_and_arranged_UIElement_in_a_RootElement : a_UIElement_in_a_RootElement
    {
        private Establish context = () =>
            {
                Subject.Protected().Setup<Size>(MeasureOverride, ItExpr.Is<Size>(size => size.Equals(AvailableSize))).
                    Returns(DesiredSize);
                Subject.Protected().Setup<Size>(ArrangeOverride, ItExpr.IsAny<Size>()).Returns(FinalSize);

                RootElement.Object.Update();
                Subject.Object.Visibility = Visibility.Collapsed;
                RootElement.Object.Update();
            };
    }
}