//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Graphics.RendererSpecs
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Adapters.Xna.Graphics;
    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Media;

    using It = Machine.Specifications.It;

    public abstract class a_Renderer
    {
        protected static Renderer Renderer;

        protected static Mock<ISpriteBatch> SpriteBatch;

        private Establish context = () =>
            {
                SpriteBatch = new Mock<ISpriteBatch>();
                Renderer = new Renderer(SpriteBatch.Object, new Mock<IPrimitivesService>().Object);
            };
    }

    [Subject(typeof(Renderer))]
    public class when_the_same_element_requests_a_drawing_context_more_than_once : a_Renderer
    {
        private static Mock<IElement> element;

        private Establish context = () => { element = new Mock<IElement>(); };

        private Because of = () =>
            {
                Renderer.GetDrawingContext(element.Object).DrawRectangle(Rect.Empty, new SolidColorBrush(Colors.Blue));
                Renderer.GetDrawingContext(element.Object).DrawRectangle(Rect.Empty, new SolidColorBrush(Colors.Blue));
                Renderer.Draw();
            };

        private It should_only_draw_the_element_once =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()), 
                Times.Once());
    }

    [Subject(typeof(Renderer))]
    public class when_a_renderer_contains_an_invalid_context_after_clearing : a_Renderer
    {
        private Establish context =
            () =>
            Renderer.GetDrawingContext(new Mock<IElement>().Object).DrawRectangle(
                Rect.Empty, new SolidColorBrush(Colors.Blue));

        private Because of = () =>
            {
                Renderer.ClearInvalidDrawingContexts();
                Renderer.Draw();
            };

        private It should_not_draw_anything =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()), 
                Times.Never());
    }

    [Subject(typeof(Renderer))]
    public class when_a_renderer_contains_a_valid_context_after_clearing : a_Renderer
    {
        private Establish context = () =>
            {
                var mock = new Mock<IElement>();
                mock.SetupGet(element => element.IsArrangeValid).Returns(true);
                mock.SetupGet(element => element.VisualParent).Returns(new Mock<IElement>().Object);
                Renderer.GetDrawingContext(mock.Object).DrawRectangle(Rect.Empty, new SolidColorBrush(Colors.Blue));
            };

        private Because of = () =>
            {
                Renderer.ClearInvalidDrawingContexts();
                Renderer.Draw();
            };

        private It should_still_draw =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()));
    }

    [Subject(typeof(Renderer))]
    public class when_a_renderer_contains_an_orphaned_element : a_Renderer
    {
        private Establish context = () =>
            {
                var mock = new Mock<IElement>();
                mock.SetupGet(element => element.IsArrangeValid).Returns(true);
                mock.SetupGet(element => element.VisualParent).Returns(default(IElement));
                Renderer.GetDrawingContext(mock.Object).DrawRectangle(Rect.Empty, new SolidColorBrush(Colors.Blue));
            };

        private Because of = () =>
            {
                Renderer.ClearInvalidDrawingContexts();
                Renderer.Draw();
            };

        private It should_not_draw_the_orphaned_element =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()), 
                Times.Never());
    }
}