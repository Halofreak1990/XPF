//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Controls.ScrollContentPresenterSpecs
{
    using System;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Controls;

    using It = Machine.Specifications.It;

    public abstract class a_ScrollContentPresenter
    {
        protected static ScrollContentPresenter ScrollContentPresenter;

        private Establish context = () => ScrollContentPresenter = new ScrollContentPresenter();
    }

    [Subject(typeof(ScrollContentPresenter), "Horizontal Offset")]
    public class when_horizontal_offset_is_set_to_not_a_number : a_ScrollContentPresenter
    {
        private static Exception exception;

        private Because of =
            () => exception = Catch.Exception(() => ScrollContentPresenter.SetHorizontalOffset(double.NaN));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<ArgumentOutOfRangeException>();
    }

    [Subject(typeof(ScrollContentPresenter), "Horizontal Offset")]
    public class when_horizontal_offset_is_set_to_a_negative_value : a_ScrollContentPresenter
    {
        private Establish context = () => ScrollContentPresenter.SetHorizontalOffset(10);

        private Because of = () => ScrollContentPresenter.SetHorizontalOffset(-10);

        private It should_set_the_offset_to_zero = () => ScrollContentPresenter.Offset.X.ShouldEqual(0);
    }

    [Subject(typeof(ScrollContentPresenter), "Horizontal Offset")]
    public class when_horizontal_scrolling_is_disabled_and_an_offset_is_set : a_ScrollContentPresenter
    {
        private Establish context = () => ScrollContentPresenter.CanHorizontallyScroll = false;

        private Because of = () => ScrollContentPresenter.SetHorizontalOffset(10);

        private It should_have_no_effect = () => ScrollContentPresenter.Offset.X.ShouldEqual(0);
    }

    [Subject(typeof(ScrollContentPresenter), "Horizontal Offset")]
    public class when_horizontal_offset_is_changed : a_ScrollContentPresenter
    {
        private Establish context = () =>
            {
                ScrollContentPresenter.Measure(new Size(100, 100));
                ScrollContentPresenter.Arrange(new Rect(0, 0, 100, 100));
            };

        private Because of = () => ScrollContentPresenter.SetHorizontalOffset(10);

        private It should_invalidate_arrange = () => ScrollContentPresenter.IsArrangeValid.ShouldBeFalse();
    }

    [Subject(typeof(ScrollContentPresenter), "Vertical Offset")]
    public class when_vertical_offset_is_set_to_not_a_number : a_ScrollContentPresenter
    {
        private static Exception exception;

        private Because of =
            () => exception = Catch.Exception(() => ScrollContentPresenter.SetVerticalOffset(double.NaN));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<ArgumentOutOfRangeException>();
    }

    [Subject(typeof(ScrollContentPresenter), "Vertical Offset")]
    public class when_vertical_offset_is_set_to_a_negative_value : a_ScrollContentPresenter
    {
        private Establish context = () => ScrollContentPresenter.SetVerticalOffset(10);

        private Because of = () => ScrollContentPresenter.SetVerticalOffset(-10);

        private It should_set_the_offset_to_zero = () => ScrollContentPresenter.Offset.Y.ShouldEqual(0);
    }

    [Subject(typeof(ScrollContentPresenter), "Vertical Offset")]
    public class when_vertical_scrolling_is_disabled_and_an_offset_is_set : a_ScrollContentPresenter
    {
        private Establish context = () => ScrollContentPresenter.CanVerticallyScroll = false;

        private Because of = () => ScrollContentPresenter.SetVerticalOffset(10);

        private It should_have_no_effect = () => ScrollContentPresenter.Offset.Y.ShouldEqual(0);
    }

    [Subject(typeof(ScrollContentPresenter), "Vertical Offset")]
    public class when_vertical_offset_is_changed : a_ScrollContentPresenter
    {
        private Establish context = () =>
            {
                ScrollContentPresenter.Measure(new Size(100, 100));
                ScrollContentPresenter.Arrange(new Rect(0, 0, 100, 100));
            };

        private Because of = () => ScrollContentPresenter.SetVerticalOffset(10);

        private It should_invalidate_arrange = () => ScrollContentPresenter.IsArrangeValid.ShouldBeFalse();
    }

    [Subject(typeof(ScrollContentPresenter), "Arrange")]
    public class when_content_is_scrolled : a_ScrollContentPresenter
    {
        private static Mock<UIElement> content;

        private Establish context = () =>
            {
                content = new Mock<UIElement> { CallBase = true };
                content.Object.Width = 200;
                content.Object.Height = 200;

                ScrollContentPresenter.Content = content.Object;
            };

        private Because of = () =>
            {
                ScrollContentPresenter.SetHorizontalOffset(20);
                ScrollContentPresenter.SetVerticalOffset(30);

                ScrollContentPresenter.Measure(new Size(100, 100));
                ScrollContentPresenter.Arrange(new Rect(0, 0, 100, 100));
            };

        private It should_set_the_child_visual_offset_correctly =
            () => content.Object.VisualOffset.ShouldEqual(new Vector(-20, -30));
    }

    [Subject(typeof(ScrollContentPresenter), "Arrange")]
    public class when_content_is_scrolled_beyond_its_extent : a_ScrollContentPresenter
    {
        private static Mock<UIElement> content;

        private Establish context = () =>
            {
                content = new Mock<UIElement> { CallBase = true };
                content.Object.Width = 200;
                content.Object.Height = 200;

                ScrollContentPresenter.Content = content.Object;
            };

        private Because of = () =>
            {
                ScrollContentPresenter.SetHorizontalOffset(220);
                ScrollContentPresenter.SetVerticalOffset(230);

                ScrollContentPresenter.Measure(new Size(100, 100));
                ScrollContentPresenter.Arrange(new Rect(0, 0, 100, 100));
            };

        private It should_coerce_its_own_offset_to_keep_it_inside_the_extent =
            () => ScrollContentPresenter.Offset.ShouldEqual(new Vector(100, 100));

        private It should_coerce_the_child_visual_offset_to_keep_it_inside_the_extent =
            () => content.Object.VisualOffset.ShouldEqual(new Vector(-100, -100));
    }
}