//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.DefinitionBaseSpecs
{
    using System.Windows;

    using Machine.Specifications;

    using RedBadger.Xpf.Presentation.Controls;

    [Subject(typeof(DefinitionBase))]
    public class when_a_column_definition_is_initialized
    {
        private const GridUnitType ExpectedGridUnitType = GridUnitType.Pixel;

        private const double ExpectedMaxWidth = 100;

        private const double ExpectedMinWidth = 10;

        private const double ExpectedWidth = 10;

        private static ColumnDefinition columnDefinition;

        private Because of =
            () =>
            columnDefinition =
            new ColumnDefinition
                {
                    Width = new GridLength(ExpectedWidth, ExpectedGridUnitType), 
                    MinWidth = ExpectedMinWidth, 
                    MaxWidth = ExpectedMaxWidth
                };

        private It should_return_column_max_width_when_user_max_length_is_requested =
            () => columnDefinition.UserMaxLength.ShouldEqual(ExpectedMaxWidth);

        private It should_return_column_min_width_when_user_min_length_is_requested =
            () => columnDefinition.UserMinLength.ShouldEqual(ExpectedMinWidth);

        private It should_return_column_width_when_user_length_is_requested =
            () => columnDefinition.UserLength.Value.ShouldEqual(ExpectedWidth);

        private It should_return_the_columns_unit_type_when_user_length_is_requested =
            () => columnDefinition.UserLength.GridUnitType.ShouldEqual(ExpectedGridUnitType);
    }

    [Subject(typeof(DefinitionBase))]
    public class when_a_row_definition_is_initialized
    {
        private const GridUnitType ExpectedGridUnitType = GridUnitType.Pixel;

        private const double ExpectedHeight = 10;

        private const double ExpectedMaxHeight = 100;

        private const double ExpectedMinHeight = 10;

        private static RowDefinition rowDefinition;

        private Because of =
            () =>
            rowDefinition =
            new RowDefinition
                {
                    Height = new GridLength(ExpectedHeight, ExpectedGridUnitType), 
                    MinHeight = ExpectedMinHeight, 
                    MaxHeight = ExpectedMaxHeight
                };

        private It should_return_row_max_height_when_user_max_length_is_requested =
            () => rowDefinition.UserMaxLength.ShouldEqual(ExpectedMaxHeight);

        private It should_return_row_min_height_when_user_min_length_is_requested =
            () => rowDefinition.UserMinLength.ShouldEqual(ExpectedMinHeight);

        private It should_return_row_height_when_user_length_is_requested =
            () => rowDefinition.UserLength.Value.ShouldEqual(ExpectedHeight);

        private It should_return_the_rows_unit_type_when_user_length_is_requested =
            () => rowDefinition.UserLength.GridUnitType.ShouldEqual(ExpectedGridUnitType);
    }
}