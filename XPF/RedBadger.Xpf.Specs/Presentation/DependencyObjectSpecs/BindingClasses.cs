//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.DependencyObjectSpecs
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using RedBadger.Xpf.Presentation.Data;
    using RedBadger.Xpf.Presentation.Media;

    public class BorderBrushBindingObject : INotifyPropertyChanged
    {
        private SolidColorBrush brush;

        public event EventHandler<PropertyChangedEventArgs> PropertyChanged;

        public SolidColorBrush Brush
        {
            get
            {
                return this.brush;
            }

            set
            {
                if (this.brush != value)
                {
                    this.brush = value;
                    this.OnPropertyChanged("Brush");
                }
            }
        }

        public void OnPropertyChanged(string propertyName)
        {
            EventHandler<PropertyChangedEventArgs> handler = this.PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public class BindingObjectWithDouble : INotifyPropertyChanged
    {
        private double value;

        public event EventHandler<PropertyChangedEventArgs> PropertyChanged;

        public double Value
        {
            get
            {
                return this.value;
            }

            set
            {
                if (this.value != value)
                {
                    this.value = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }

        public void OnPropertyChanged(string propertyName)
        {
            EventHandler<PropertyChangedEventArgs> handler = this.PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    public class MyBindingObject
    {
        private readonly BehaviorSubject<double> myWidthProperty = new BehaviorSubject<double>(Double.NaN);

        public double MyWidth
        {
            get
            {
                return this.myWidthProperty.First();
            }

            set
            {
                this.myWidthProperty.OnNext(value);
            }
        }

        public IObserver<double> MyWidthIn
        {
            get
            {
                return this.myWidthProperty;
            }
        }

        public IObservable<double> MyWidthOut
        {
            get
            {
                return this.myWidthProperty;
            }
        }
    }
}