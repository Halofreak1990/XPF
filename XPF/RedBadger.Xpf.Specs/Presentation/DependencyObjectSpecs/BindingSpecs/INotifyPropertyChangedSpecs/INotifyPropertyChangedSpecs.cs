//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.DependencyObjectSpecs.BindingSpecs.INotifyPropertyChangedSpecs
{
    using System;

    using Machine.Specifications;

    using RedBadger.Xpf.Presentation;
    using RedBadger.Xpf.Presentation.Controls;
    using RedBadger.Xpf.Presentation.Data;
    using RedBadger.Xpf.Presentation.Media;

    public class TestBindingObject : INotifyPropertyChanged
    {
        private Brush brush;

        private SolidColorBrush solidColorBrush;

        private double width;

        public event EventHandler<PropertyChangedEventArgs> PropertyChanged;

        public Brush Brush
        {
            get
            {
                return this.brush;
            }

            set
            {
                if (this.brush != value)
                {
                    this.brush = value;
                    this.OnPropertyChanged("Brush");
                }
            }
        }

        public SolidColorBrush SolidColorBrush
        {
            get
            {
                return this.solidColorBrush;
            }

            set
            {
                if (this.solidColorBrush != value)
                {
                    this.solidColorBrush = value;
                    this.OnPropertyChanged("SolidColorBrush");
                }
            }
        }

        public double Width
        {
            get
            {
                return this.width;
            }

            set
            {
                if (this.width != value)
                {
                    this.width = value;
                    this.OnPropertyChanged("Width");
                }
            }
        }

        public void OnPropertyChanged(string propertyName)
        {
            EventHandler<PropertyChangedEventArgs> handler = this.PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Subject(typeof(DependencyObject))]
    public class when_a_binding_is_one_way
    {
        private const double ExpectedWidth = 10d;

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border();

                IObservable<double> fromSource = BindingFactory.CreateOneWay(source, o => o.Width);
                target.Bind(UIElement.WidthProperty, fromSource);
            };

        private Because of = () => source.Width = ExpectedWidth;

        private It should_update_the_target_property_with_the_correct_value =
            () => target.Width.ShouldEqual(ExpectedWidth);
    }

    [Subject(typeof(DependencyObject))]
    public class when_a_binding_is_one_way_and_the_source_property_type_is_more_derived
    {
        private static readonly SolidColorBrush expectedBrush = new SolidColorBrush(Colors.Brown);

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border();

                IObservable<Brush> fromSource = BindingFactory.CreateOneWay(source, o => o.SolidColorBrush);
                target.Bind(Border.BorderBrushProperty, fromSource);
            };

        private Because of = () => source.SolidColorBrush = expectedBrush;

        private It should_have_the_correct_brush = () => target.BorderBrush.ShouldEqual(expectedBrush);
    }

    [Subject(typeof(DependencyObject))]
    public class when_a_binding_is_two_way
    {
        private static readonly Brush expectedSourceBrush = new SolidColorBrush(Colors.Blue);

        private static readonly Brush expectedTargetBrush = new SolidColorBrush(Colors.Red);

        private static Brush actualBrushOnSource;

        private static Brush actualBrushOnTarget;

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border();

                TwoWayBinding<Brush> twoWay = BindingFactory.CreateTwoWay(source, o => o.Brush);
                target.Bind(Border.BorderBrushProperty, twoWay);
            };

        private Because of = () =>
            {
                target.BorderBrush = expectedTargetBrush;
                actualBrushOnSource = source.Brush;

                source.Brush = expectedSourceBrush;
                actualBrushOnTarget = target.BorderBrush;
            };

        private It should_have_the_correct_brush_on_the_source =
            () => actualBrushOnSource.ShouldEqual(expectedTargetBrush);

        private It should_have_the_correct_brush_on_the_target =
            () => actualBrushOnTarget.ShouldEqual(expectedSourceBrush);
    }

    [Subject(typeof(DependencyObject))]
    public class when_a_binding_is_changed
    {
        private static readonly Brush expectedBrush = new SolidColorBrush(Colors.Brown);

        private static TestBindingObject source1;

        private static TestBindingObject source2;

        private static Border target;

        private Establish context = () =>
            {
                source1 = new TestBindingObject();
                source2 = new TestBindingObject();
                target = new Border();

                IObservable<Brush> fromSource1 = BindingFactory.CreateOneWay(source1, o => o.Brush);
                target.Bind(Border.BorderBrushProperty, fromSource1);
            };

        private Because of = () =>
            {
                IObservable<Brush> fromSource2 = BindingFactory.CreateOneWay(source2, o => o.Brush);
                target.Bind(Border.BorderBrushProperty, fromSource2);

                source2.Brush = expectedBrush;
                source1.Brush = new SolidColorBrush(Colors.Cyan);
            };

        private It should_use_the_new_binding = () => target.BorderBrush.ShouldEqual(expectedBrush);
    }

    [Subject(typeof(DependencyObject))]
    public class when_a_binding_is_cleared
    {
        private static readonly Brush expectedBrush = new SolidColorBrush(Colors.Brown);

        private static TestBindingObject source;

        private static Border target;

        private Establish context = () =>
            {
                source = new TestBindingObject();
                target = new Border();

                IObservable<Brush> fromSource = BindingFactory.CreateOneWay(source, o => o.Brush);
                target.Bind(Border.BorderBrushProperty, fromSource);
            };

        private Because of = () =>
            {
                source.Brush = expectedBrush;
                target.ClearBinding(Border.BorderBrushProperty);

                source.Brush = new SolidColorBrush(Colors.Black);
            };

        private It should_not_use_the_binding = () => target.BorderBrush.ShouldEqual(expectedBrush);
    }
}