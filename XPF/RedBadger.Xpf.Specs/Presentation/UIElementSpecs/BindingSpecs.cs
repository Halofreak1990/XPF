//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.UIElementSpecs
{
    using Moq;

    using Machine.Specifications;

    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Presentation;
    using RedBadger.Xpf.Presentation.Controls;

    using It = Machine.Specifications.It;

    [Subject(typeof(UIElement), "Binding")]
    public class when_binding_to_the_data_context
    {
        private const string ExpectedValue = "Value";

        private static TextBlock target;

        private Establish context =
            () => target = new TextBlock(new Mock<ISpriteFont>().Object) { DataContext = ExpectedValue };

        private Because of = () => target.Bind(TextBlock.TextProperty);

        private It should_bind_to_the_object = () => target.Text.ShouldEqual(ExpectedValue);
    }

    [Subject(typeof(UIElement), "Binding")]
    public class when_the_data_context_is_set_after_the_binding_has_been_created
    {
        private const string ExpectedValue = "Value";

        private static TextBlock target;

        private Establish context = () =>
        {
            target = new TextBlock(new Mock<ISpriteFont>().Object);
            target.Bind(TextBlock.TextProperty);
        };

        private Because of = () => target.DataContext = ExpectedValue;

        private It should_bind_to_the_data_context = () => target.Text.ShouldEqual(ExpectedValue);
    }

    [Subject(typeof(UIElement), "Binding")]
    public class when_binding_to_the_data_context_and_the_data_context_is_changed
    {
        private const string NewDataContext = "New Data Context";

        private static TextBlock target;

        private Establish context = () =>
        {
            target = new TextBlock(new Mock<ISpriteFont>().Object) { DataContext = "Old Data Context" };
            target.Bind(TextBlock.TextProperty);
        };

        private Because of = () => target.DataContext = NewDataContext;

        private It should_use_the_new_data_context = () => target.Text.ShouldEqual(NewDataContext);
    }
}