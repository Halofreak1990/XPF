/*//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.UIElementSpecs
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Presentation;
    using RedBadger.Xpf.Presentation.Controls;
    using RedBadger.Xpf.Presentation.Media;

    using It = Machine.Specifications.It;

    [Subject(typeof(UIElement), "Data Context")]
    public class when_a_data_context_exists_and_a_value_type_binding_with_no_source_is_set : a_UIElement
    {
        private const double DataContext = 12d;

        private Establish context = () => UiElement.Object.DataContext = DataContext;

        private Because of = () => UiElement.Object.SetBinding(UIElement.WidthProperty, new Binding());

        private It should_use_the_data_context_for_its_binding = () => UiElement.Object.Width.ShouldEqual(DataContext);
    }

    [Subject(typeof(UIElement), "Data Context")]
    public class when_a_data_context_exists_and_a_reference_type_binding_with_no_source_is_set
    {
        private static readonly Brush DataContext = new SolidColorBrush(Colors.Blue);

        private static TextBlock textBlock;

        private Establish context =
            () => textBlock = new TextBlock(new Mock<ISpriteFont>().Object) { DataContext = DataContext };

        private Because of = () => textBlock.SetBinding(TextBlock.BackgroundProperty, new Binding());

        private It should_use_the_data_context_for_its_binding = () => textBlock.Background.ShouldEqual(DataContext);
    }

    [Subject(typeof(UIElement), "Data Context")]
    public class when_a_binding_already_has_a_source : a_UIElement
    {
        private const double Source = 20d;

        private Establish context = () => UiElement.Object.DataContext = 12d;

        private Because of = () => UiElement.Object.SetBinding(UIElement.WidthProperty, new Binding { Source = Source });

        private It should_use_the_source_of_the_binding_not_the_data_context =
            () => UiElement.Object.Width.ShouldEqual(Source);
    }

    [Subject(typeof(UIElement), "Data Context")]
    public class when_a_value_type_binding_with_no_source_exists_and_the_data_context_is_set : a_UIElement
    {
        private const double DataContext = 12d;

        private Establish context = () => UiElement.Object.SetBinding(UIElement.WidthProperty, new Binding());

        private Because of = () => UiElement.Object.DataContext = DataContext;

        private It should_use_the_data_context_for_its_binding = () => UiElement.Object.Width.ShouldEqual(DataContext);
    }

    [Subject(typeof(UIElement), "Data Context")]
    public class when_a_reference_type_binding_with_no_source_exists_and_the_data_context_is_set
    {
        private static readonly Brush DataContext = new SolidColorBrush(Colors.Blue);

        private static TextBlock textBlock;

        private Establish context = () =>
            {
                textBlock = new TextBlock(new Mock<ISpriteFont>().Object);
                textBlock.SetBinding(TextBlock.BackgroundProperty, new Binding());
            };

        private Because of = () => textBlock.DataContext = DataContext;

        private It should_use_the_data_context_for_its_binding = () => textBlock.Background.ShouldEqual(DataContext);
    }
}*/