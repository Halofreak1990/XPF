//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Controls.BorderSpecs
{
    using System.Windows;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Presentation;
    using RedBadger.Xpf.Presentation.Controls;
    using RedBadger.Xpf.Presentation.Media;

    using It = Moq.It;
    using UIElement = RedBadger.Xpf.Presentation.UIElement;

    public abstract class a_Border
    {
        protected static Border Border;

        private Establish context = () => { Border = new Border(); };
    }

    public abstract class a_Border_with_child : a_Border
    {
        protected static readonly Size AvailableSize = new Size(200, 200);

        protected static Mock<UIElement> Child;

        protected static Size ChildSize;

        protected static Mock<IDrawingContext> DrawingContext;

        protected static IRenderer Renderer;

        protected static Mock<RootElement> RootElement;

        private Establish context = () =>
            {
                var renderer = new Mock<IRenderer>();
                DrawingContext = new Mock<IDrawingContext>();
                renderer.Setup(r => r.GetDrawingContext(It.IsAny<IElement>())).Returns(DrawingContext.Object);

                RootElement = new Mock<RootElement>(new Rect(AvailableSize), renderer.Object) { CallBase = true };

                ChildSize = new Size(15, 35);
                Child = new Mock<UIElement> { CallBase = true };
                Child.Object.HorizontalAlignment = HorizontalAlignment.Left;
                Child.Object.VerticalAlignment = VerticalAlignment.Top;
                Child.Object.Width = ChildSize.Width;
                Child.Object.Height = ChildSize.Height;

                Border.Child = Child.Object;

                RootElement.Object.Content = Border;
            };
    }
}