//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Controls.GridSpecs.Auto
{
    using Machine.Specifications;

    using RedBadger.Xpf.Presentation;
    using RedBadger.Xpf.Presentation.Controls;

    [Subject(typeof(Grid), "Arrange")]
    public class when_arranging_two_rows_and_two_columns : an_Auto_Grid_with_two_rows_and_two_columns
    {
        private Establish context = () => Subject.Measure(AvailableSize);

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_1_layout_the_top_left_child_correctly =
            () => TopLeftChild.Object.VisualOffset.ShouldEqual(Vector.Zero);

        private It should_2_layout_the_top_right_child_correctly =
            () => TopRightChild.Object.VisualOffset.ShouldEqual(new Vector(50, 0));

        private It should_3_layout_the_bottom_left_child_correctly =
            () => BottomLeftChild.Object.VisualOffset.ShouldEqual(new Vector(0, 80));

        private It should_4_layout_the_bottom_right_child_correctly =
            () => BottomRightChild.Object.VisualOffset.ShouldEqual(new Vector(50, 80));
    }

    [Subject(typeof(Grid), "Arrange")]
    public class when_arranging_two_rows_and_two_columns_with_minimum_values_which_are_greater_than_their_children :
        an_Auto_Grid_with_two_rows_and_two_columns
    {
        private const double MinHeight = 90;

        private const double MinWidth = 80;

        private Establish context = () =>
            {
                ColumnOneDefinition.MinWidth = MinWidth;
                ColumnTwoDefinition.MinWidth = MinWidth;

                RowOneDefinition.MinHeight = MinHeight;
                RowTwoDefinition.MinHeight = MinHeight;

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_the_bottom_left_child_correctly =
            () => BottomLeftChild.Object.VisualOffset.ShouldEqual(new Vector(0, MinHeight));

        private It should_layout_the_bottom_right_child_correctly =
            () => BottomRightChild.Object.VisualOffset.ShouldEqual(new Vector(MinWidth, MinHeight));

        private It should_layout_the_top_left_child_correctly =
            () => TopLeftChild.Object.VisualOffset.ShouldEqual(Vector.Zero);

        private It should_layout_the_top_right_child_correctly =
            () => TopRightChild.Object.VisualOffset.ShouldEqual(new Vector(MinWidth, 0));
    }

    [Subject(typeof(Grid), "Arrange")]
    public class when_arranging_two_rows_and_two_columns_with_maximum_values_which_are_less_than_their_children :
        an_Auto_Grid_with_two_rows_and_two_columns
    {
        private const double MaxHeight = 9;

        private const double MaxWidth = 8;

        private Establish context = () =>
            {
                ColumnOneDefinition.MaxWidth = MaxWidth;
                ColumnTwoDefinition.MaxWidth = MaxWidth;

                RowOneDefinition.MaxHeight = MaxHeight;
                RowTwoDefinition.MaxHeight = MaxHeight;

                Subject.Measure(AvailableSize);
            };

        private Because of = () => Subject.Arrange(new Rect(AvailableSize));

        private It should_layout_the_bottom_left_child_correctly =
            () => BottomLeftChild.Object.VisualOffset.ShouldEqual(new Vector(0, MaxHeight));

        private It should_layout_the_bottom_right_child_correctly =
            () => BottomRightChild.Object.VisualOffset.ShouldEqual(new Vector(MaxWidth, MaxHeight));

        private It should_layout_the_top_left_child_correctly =
            () => TopLeftChild.Object.VisualOffset.ShouldEqual(Vector.Zero);

        private It should_layout_the_top_right_child_correctly =
            () => TopRightChild.Object.VisualOffset.ShouldEqual(new Vector(MaxWidth, 0));
    }
}