//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Controls.GridSpecs.Pixel
{
    using System.Windows;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Presentation.Controls;

    using It = Machine.Specifications.It;
    using UIElement = RedBadger.Xpf.Presentation.UIElement;

    [Subject(typeof(Grid), "Measure - Pixel")]
    public class when_there_is_a_column_with_pixel_width : a_Grid
    {
        private const double ColumnWidth = 10;

        private static Mock<UIElement> child;

        private Establish context = () =>
            {
                Grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(ColumnWidth) });

                child = new Mock<UIElement> { CallBase = true };
                child.Object.Width = 50;
                child.Object.Height = 60;

                Grid.Children.Add(child.Object);
            };

        private Because of = () => Grid.Measure(AvailableSize);

        private It should_have_a_desired_height_equal_to_the_available_height =
            () => Grid.DesiredSize.Height.ShouldEqual(AvailableSize.Height);

        private It should_have_a_desired_width_equal_to_that_of_the_column_width =
            () => Grid.DesiredSize.Width.ShouldEqual(ColumnWidth);
    }

    [Subject(typeof(Grid), "Measure - Pixel")]
    public class when_there_is_a_row_with_pixel_height : a_Grid
    {
        private const double RowHeight = 10;

        private static Mock<UIElement> child;

        private Establish context = () =>
            {
                Grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(RowHeight) });

                child = new Mock<UIElement> { CallBase = true };
                child.Object.Width = 50;
                child.Object.Height = 60;

                Grid.Children.Add(child.Object);
            };

        private Because of = () => Grid.Measure(AvailableSize);

        private It should_have_a_desired_height_equal_to_that_of_the_row_height =
            () => Grid.DesiredSize.Height.ShouldEqual(RowHeight);

        private It should_have_a_desired_width_equal_to_the_available_width =
            () => Grid.DesiredSize.Width.ShouldEqual(AvailableSize.Width);
    }

    [Subject(typeof(Grid), "Measure - Pixel")]
    public class when_measuring_a_pixel_grid_with_two_rows_and_two_columns : a_Grid
    {
        private const double ExpectedHeight1 = 66f;

        private const double ExpectedHeight2 = 80;

        private const double ExpectedWidth1 = 45f;

        private const double ExpectedWidth2 = 54f;

        private Establish context = () =>
            {
                Grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(ExpectedWidth1) });
                Grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(ExpectedWidth2) });
                Grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(ExpectedHeight1) });
                Grid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(ExpectedHeight2) });
            };

        private Because of = () => Grid.Measure(AvailableSize);

        private It should_have_a_desired_height_equal_to_the_sum_of_row_heights =
            () => Grid.DesiredSize.Height.ShouldEqual(ExpectedHeight1 + ExpectedHeight2);

        private It should_have_a_desired_width_equal_to_the_sum_of_the_column_widths =
            () => Grid.DesiredSize.Width.ShouldEqual(ExpectedWidth1 + ExpectedWidth2);
    }

    [Subject(typeof(Grid), "Measure")]
    public class when_a_column_index_is_specified_greater_than_the_number_of_columns_available : a_Grid
    {
        private It should_put_it_in_the_last_column;
    }
}