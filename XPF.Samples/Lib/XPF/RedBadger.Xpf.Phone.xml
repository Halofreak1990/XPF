<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedBadger.Xpf.Phone</name>
    </assembly>
    <members>
        <member name="T:RedBadger.Xpf.Presentation.ReactiveObject">
            <summary>
                Represents an object that participates in the Reactive Property system.
            </summary>
        </member>
        <member name="T:RedBadger.Xpf.Presentation.IReactiveObject">
            <summary>
                Represents an object that participates in the Reactive Property system.
            </summary>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.IReactiveObject.ClearValue(RedBadger.Xpf.Presentation.IReactiveProperty)">
            <summary>
                Clears the value of a <see cref="T:RedBadger.Xpf.Presentation.IReactiveProperty">IReactiveProperty</see> on this instance of <see cref="T:RedBadger.Xpf.Presentation.IReactiveObject">IReactiveObject</see>.
            </summary>
            <param name="property">The <see cref="T:RedBadger.Xpf.Presentation.IReactiveProperty">IReactiveProperty</see> to clear.</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.IReactiveObject.GetObservable``2(RedBadger.Xpf.Presentation.ReactiveProperty{``0,``1})">
            <summary>
                Gets an <see cref="T:System.IObservable`1">IObservable</see> for a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> for this instance of <see cref="T:RedBadger.Xpf.Presentation.ReactiveObject">ReactiveObject</see>.
            </summary>
            <typeparam name="TProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s <see cref="T:System.Type">Type</see></typeparam>
            <typeparam name="TOwner">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s owner <see cref="T:System.Type">Type</see></typeparam>
            <param name="property">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> to retrieve a value for.</param>
            <returns>An <see cref="T:System.IObservable`1">IObservable</see> around the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.IReactiveObject.GetObserver``2(RedBadger.Xpf.Presentation.ReactiveProperty{``0,``1})">
            <summary>
                Gets an <see cref="T:System.IObserver`1">IObserver</see> for a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> for this instance of <see cref="T:RedBadger.Xpf.Presentation.ReactiveObject">ReactiveObject</see>.
            </summary>
            <typeparam name="TProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s <see cref="T:System.Type">Type</see></typeparam>
            <typeparam name="TOwner">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s owner <see cref="T:System.Type">Type</see></typeparam>
            <param name="property">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> to retrieve a value for.</param>
            <returns>An <see cref="T:System.IObserver`1">IObserver</see> around the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.IReactiveObject.GetValue``2(RedBadger.Xpf.Presentation.ReactiveProperty{``0,``1})">
            <summary>
                Gets the current value of a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on this instance of <see cref="T:RedBadger.Xpf.Presentation.IReactiveObject">IReactiveObject</see>.
            </summary>
            <typeparam name="TProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s <see cref="T:System.Type">Type</see></typeparam>
            <typeparam name="TOwner">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s owner <see cref="T:System.Type">Type</see></typeparam>
            <param name="property">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> to retrieve a value for.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.IReactiveObject.SetValue``2(RedBadger.Xpf.Presentation.ReactiveProperty{``0,``1},``0)">
            <summary>
                Sets the value of a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on this instance of <see cref="T:RedBadger.Xpf.Presentation.IReactiveObject">IReactiveObject</see>.
            </summary>
            <typeparam name="TProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s <see cref="T:System.Type">Type</see></typeparam>
            <typeparam name="TOwner">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s owner <see cref="T:System.Type">Type</see></typeparam>
            <param name="property">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> to set.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveObject.Bind``2(RedBadger.Xpf.Presentation.ReactiveProperty{``0,``1},System.IObservable{``0})">
            <summary>
                Bind One Way (from the Source).
            </summary>
            <typeparam name="TProperty">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> <see cref="T:System.Type">Type</see></typeparam>
            <typeparam name="TOwner">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s owner <see cref="T:System.Type">Type</see></typeparam>
            <param name="property">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see></param>
            <param name="fromSource"><see cref="T:System.IObservable`1">IObservable</see> of updates from the source</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveObject.Bind``2(RedBadger.Xpf.Presentation.ReactiveProperty{``0,``1},System.IObserver{``0})">
            <summary>
                Bind One Way (to the Source).
            </summary>
            <typeparam name="TProperty">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> <see cref="T:System.Type">Type</see></typeparam>
            <typeparam name="TOwner">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s owner <see cref="T:System.Type">Type</see></typeparam>
            <param name="property">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see></param>
            <param name="toSource"><see cref="T:System.IObserver`1">IObserver</see> of updates for the Source</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveObject.Bind``2(RedBadger.Xpf.Presentation.ReactiveProperty{``0,``1},RedBadger.Xpf.Presentation.Data.IDualChannel{``0})">
            <summary>
                Bind Two Way (from and to the Source)
            </summary>
            <typeparam name="TProperty">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> <see cref="T:System.Type">Type</see></typeparam>
            <typeparam name="TOwner">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s owner <see cref="T:System.Type">Type</see></typeparam>
            <param name="property">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see></param>
            <param name="source">A <see cref="T:RedBadger.Xpf.Presentation.Data.TwoWayBinding`1">TwoWayBinding</see> containing both an <see cref="T:System.IObservable`1">IObservable</see> and <see cref="T:System.IObserver`1">IObserver</see></param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveObject.Bind``2(RedBadger.Xpf.Presentation.ReactiveProperty{``0,``1},System.IObservable{``0},System.IObserver{``0})">
            <summary>
                Bind Two Way (from and to the Source)
            </summary>
            <typeparam name="TProperty">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> <see cref="T:System.Type">Type</see></typeparam>
            <typeparam name="TOwner">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>'s owner <see cref="T:System.Type">Type</see></typeparam>
            <param name="property">Target <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see></param>
            <param name="fromSource"><see cref="T:System.IObservable`1">IObservable</see> of updates from the source</param>
            <param name="toSource"><see cref="T:System.IObserver`1">IObserver</see> of updates for the Source</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveObject.ClearBinding(RedBadger.Xpf.Presentation.IReactiveProperty)">
            <summary>
                Clears the binding on the specified property.
            </summary>
            <param name = "property">The property who's binding you want to clear.</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveObject.GetNearestAncestorOfType``1">
            <summary>
                Returns the nearest ancestor of the specified type, which maybe itself or null.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">Type</see> of the ancestor</typeparam>
            <returns>The nearest ancestor of Type T</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveObject.ResolveDeferredBindings(System.Object)">
            <summary>
                Resolves all the deferred bindingss for this object using the Data Context.
            </summary>
            <param name = "dataContext">The Data Context against which the binding should be resolved.</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.IElement.Arrange(RedBadger.Xpf.Presentation.Rect)">
            <summary>
                Positions child elements and determines a size for a UIElement.
                Parent elements call this method from their ArrangeOverride implementation to form a recursive layout update.
                This method constitutes the second pass of a layout update.
            </summary>
            <param name = "finalRect">The final size that the parent computes for the child element, provided as a Rect instance.</param>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.IElement.IsArrangeValid">
            <summary>
                Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.
            </summary>
            <value>
                <c>true</c> if the size and position of layout are valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.UIElement.Arrange(RedBadger.Xpf.Presentation.Rect)">
            <summary>
                Positions child elements and determines a size for a UIElement.
                Parent elements call this method from their ArrangeOverride implementation to form a recursive layout update.
                This method constitutes the second pass of a layout update.
            </summary>
            <param name = "finalRect">The final size that the parent computes for the child element, provided as a Rect instance.</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.UIElement.Measure(RedBadger.Xpf.Presentation.Size)">
            <summary>
                Updates the DesiredSize of a UIElement.
                Derrived elements call this method from their own MeasureOverride implementations to form a recursive layout update.
                Calling this method constitutes the first pass (the "Measure" pass) of a layout update.
            </summary>
            <param name = "availableSize">
                The available space that a parent element can allocate a child element.
                A child element can request a larger space than what is available; the provided size might be accommodated.
            </param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.UIElement.ArrangeOverride(RedBadger.Xpf.Presentation.Size)">
            <summary>
                When overridden in a derived class, positions child elements and determines a size for a UIElement derived class.
            </summary>
            <param name = "finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.UIElement.GetNearestAncestorOfType``1">
            <summary>
                Returns the nearest ancestor of the specified type, which maybe itself or null.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">Type</see> of the ancestor</typeparam>
            <returns>The nearest ancestor of Type T</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.UIElement.MeasureOverride(RedBadger.Xpf.Presentation.Size)">
            <summary>
                When overridden in a derived class, measures the size in layout required for child elements and determines a size for the UIElement-derived class.
            </summary>
            <param name = "availableSize">
                The available size that this element can give to child elements.
                Infinity can be specified as a value to indicate that the element will size to whatever content is available.
            </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.UIElement.ArrangeCore(RedBadger.Xpf.Presentation.Rect)">
            <summary>
                Defines the template for core-level arrange layout definition.
            </summary>
            <remarks>
                In WPF this method is defined on UIElement as protected virtual and has a base implementation.
                FrameworkElement (which derrives from UIElement) creates a sealed implemention, similar to the below,
                which discards UIElement's base implementation.
            </remarks>
            <param name = "finalRect">The final area within the parent that element should use to arrange itself and its child elements.</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.UIElement.MeasureCore(RedBadger.Xpf.Presentation.Size)">
            <summary>
                Implements basic measure-pass layout system behavior.
            </summary>
            <remarks>
                In WPF this method is definded on UIElement as protected virtual and returns an empty Size.
                FrameworkElement (which derrives from UIElement) then creates a sealed implementation similar to the below.
                In XPF UIElement and FrameworkElement have been collapsed into a single class.
            </remarks>
            <param name = "availableSize">The available size that the parent element can give to the child elements.</param>
            <returns>The desired size of this element in layout.</returns>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.UIElement.IsArrangeValid">
            <summary>
                Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.
            </summary>
            <value>
                <c>true</c> if the size and position of layout are valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.UIElement.VisualOffset">
            <remarks>
                In WPF this is protected internal.  For the purposes of unit testing we've not made this protected.
                TODO: implement a reflection based mechanism (for Moq?) to get back values from protected properties
            </remarks>
        </member>
        <member name="T:RedBadger.Xpf.Presentation.Controls.RootElement">
            <summary>
            RootElement is the main host for all your controls, it manages the renderer, user input and is the target for Update/Draw calls.
            </summary>
        </member>
        <member name="T:RedBadger.Xpf.Presentation.Controls.ContentControl">
            <summary>
                Represents a control with a single piece of content.
            </summary>
        </member>
        <member name="T:RedBadger.Xpf.Presentation.Data.PropertyChangedEventArgs">
            <summary>
                EventArgs used with <see cref="T:RedBadger.Xpf.Presentation.Data.INotifyPropertyChanged">INotifyPropertyChanged</see> to indicate that a property's value has changed.
            </summary>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.PropertyChangedEventArgs.#ctor(System.String)">
            <summary>
                Constructs a new instance of PropertyChangedEventArgs.
            </summary>
            <param name="propertyName">The <see cref="P:RedBadger.Xpf.Presentation.Data.PropertyChangedEventArgs.PropertyName">PropertyName</see> of the property whose value has changed</param>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.Data.PropertyChangedEventArgs.PropertyName">
            <summary>
                The name of the property whose value has changed
            </summary>
        </member>
        <member name="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">
            <summary>
                Describes a Reactive Property in XPF's Reactive Property System
                Reactive Properties can participate in data binding and integrate tightly with the Reactive Extensions
            </summary>
            <typeparam name="TProperty">The <see cref="T:System.Type">Type</see> of the Property</typeparam>
            <typeparam name="TOwner">The <see cref="T:System.Type">Type</see> of the owner of the property</typeparam>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveProperty`2.Register(System.String)">
            <summary>
                Registers a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> with the given <see cref="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.Name">Name</see>.
            </summary>
            <param name="propertyName">The name of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>.</param>
            <returns>The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> that has been registered.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveProperty`2.Register(System.String,`0)">
            <summary>
                Registers a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> with the given
                <see cref="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.Name">Name</see> and default value
            </summary>
            <param name="propertyName">The name of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see></param>
            <param name="defaultValue">A default value for the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see></param>
            <returns>The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> that has been registered</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveProperty`2.Register(System.String,System.Action{`1,RedBadger.Xpf.Presentation.ReactivePropertyChangeEventArgs{`0,`1}})">
            <summary>
                Registers a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> with the given
                <see cref="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.Name">Name</see> 
                and <see cref="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.ChangedCallback">ChangedCallback</see>
            </summary>
            <param name="propertyName">The name of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see></param>
            <param name="changedCallback">A method to call when the value of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> changes.</param>
            <returns>The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> that has been registered</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.ReactiveProperty`2.Register(System.String,`0,System.Action{`1,RedBadger.Xpf.Presentation.ReactivePropertyChangeEventArgs{`0,`1}})">
            <summary>
                Registers a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> with the given
                <see cref="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.Name">Name</see>, 
                <see cref="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.DefaultValue">DefaultValue</see>
                and <see cref="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.ChangedCallback">ChangedCallback</see>
            </summary>
            <param name="propertyName">The name of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see></param>
            <param name="defaultValue">A default value for the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see></param>
            <param name="changedCallback">A method to call when the value of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> changes.</param>
            <returns>The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> that has been registered</returns>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.ChangedCallback">
            <summary>
                A Call-back that is called whenever the value of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> changes
            </summary>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.DefaultValue">
            <summary>
                The default value of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>
            </summary>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.ReactiveProperty`2.Name">
            <summary>
                The Name of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see>
            </summary>
        </member>
        <member name="T:RedBadger.Xpf.Presentation.Data.BindingFactory">
            <summary>
                A factory that creates IObservable and IObserver around a variety of sources.
            </summary>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWay``1">
            <summary>
                Creates a One Way Binding to the element's Data Context.
            </summary>
            <remarks>
                When binding to the Data Context, the binding returned is not resolved (ie. connected to the source) until the beginning of the Measure phase.
                This allows for the Data Context to be set after the binding has been created and changed at any time.
            </remarks>
            <typeparam name="TSource">The Type of the Data Context.</typeparam>
            <returns><see cref="T:System.IObservable`1">IObservable</see> around the Data Context.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWay``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Creates a One Way Binding to a property on the element's Data Context.
            </summary>
            <remarks>
                When binding to the Data Context, the binding returned is not resolved (ie. connected to the source) until the beginning of the Measure phase.
                This allows for the Data Context to be set after the binding has been created and changed at any time.
            </remarks>
            <typeparam name="TSource">The Type of the Data Context.</typeparam>
            <typeparam name="TProperty">The Type of the property on the Data Context.</typeparam>
            <param name="propertySelector">Lambda expression which returns the property on the Data Context.</param>
            <returns><see cref="T:System.IObservable`1">IObservable</see> around the property on the Data Context.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWay``2(RedBadger.Xpf.Presentation.ReactiveProperty{``1,``0})">
            <summary>
                Creates a One Way Binding to a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on the element's Data Context.
            </summary>
            <remarks>
                When binding to the Data Context, the binding returned is not resolved (ie. connected to the source) until the beginning of the Measure phase.
                This allows for the Data Context to be set after the binding has been created and changed at any time.
            </remarks>
            <typeparam name="TSource">The Type of the Data Context.</typeparam>
            <typeparam name="TProperty">The Type of the property on the Data Context.</typeparam>
            <param name="reactiveProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> you're binding to.</param>
            <returns><see cref="T:System.IObservable`1">IObservable</see> around the property on the Data Context.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWay``1(``0)">
            <summary>
                Creates a One Way Binding directly to a source object.
            </summary>
            <typeparam name = "TSource">The Type of the source.</typeparam>
            <param name = "source">The binding source.</param>
            <returns>IObservable around the source.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWay``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Creates a One Way Binding to a property on a source.
            </summary>
            <typeparam name="TSource">The Type of the source.</typeparam>
            <typeparam name="TProperty">The Type of the property on the source.</typeparam>
            <param name="source">The binding source.</param>
            <param name="propertySelector">Lambda expression which returns the property on the source.</param>
            <returns><see cref="T:System.IObservable`1">IObservable</see> around the property on the source.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWay``2(``0,RedBadger.Xpf.Presentation.ReactiveProperty{``1,``0})">
            <summary>
                Creates a One Way Binding to a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on a source.
            </summary>
            <typeparam name="TSource">The Type of the source.</typeparam>
            <typeparam name="TProperty">The Type of the property on the source.</typeparam>
            <param name="source">The binding source.</param>
            <param name="reactiveProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on the source.</param>
            <returns><see cref="T:System.IObservable`1">IObservable</see> around the property on the source.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWayToSource``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Creates a One Way To Source Binding to a property on the Data Context.
            </summary>
            <remarks>
                When binding to the Data Context, the binding returned is not resolved (ie. connected to the source) until the beginning of the Measure phase.
                This allows for the Data Context to be set after the binding has been created and changed at any time.
            </remarks>
            <typeparam name="TSource">The Type of the Data Context.</typeparam>
            <typeparam name="TProperty">The Type of the property on the Data Context.</typeparam>
            <param name="propertySelector">Lambda expression which returns the property on the Data Context.</param>
            <returns><see cref="T:System.IObserver`1">IObserver</see> around the property on the Data Context.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWayToSource``2(RedBadger.Xpf.Presentation.ReactiveProperty{``1,``0})">
            <summary>
                Creates a One Way To Source Binding to a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on the Data Context.
            </summary>
            <typeparam name="TSource">The Type of the Data Context.</typeparam>
            <typeparam name="TProperty">The Type of the property on the Data Context.</typeparam>
            <param name="reactiveProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> you're binding to.</param>
            <returns><see cref="T:System.IObserver`1">IObserver</see> around the property on the Data Context.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWayToSource``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Creates a One Way To Source Binding to a property on a source.
            </summary>
            <typeparam name="TSource">The Type of the source.</typeparam>
            <typeparam name="TProperty">The Type of the property on the source.</typeparam>
            <param name="source">The binding source.</param>
            <param name="propertySelector">Lambda expression which returns the property on the source.</param>
            <returns><see cref="T:System.IObserver`1">IObserver</see> around the property on the source.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateOneWayToSource``2(``0,RedBadger.Xpf.Presentation.ReactiveProperty{``1,``0})">
            <summary>
                Creates a One Way To Source Binding to a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on a source.
            </summary>
            <typeparam name="TSource">The Type of the source.</typeparam>
            <typeparam name="TProperty">The Type of the property on the source.</typeparam>
            <param name="source">The binding source.</param>
            <param name="reactiveProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on the source.</param>
            <returns><see cref="T:System.IObserver`1">IObserver</see> around the property on the source.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateTwoWay``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Creates a Two Way Binding to a property on the element's Data Context.
            </summary>
            <remarks>
                When binding to the Data Context, the binding returned is not resolved (ie. connected to the source) until the beginning of the Measure phase.
                This allows for the Data Context to be set after the binding has been created and changed at any time.
            </remarks>
            <typeparam name="TSource">The Type of the Data Context.</typeparam>
            <typeparam name="TProperty">The Type of the property on the Data Context.</typeparam>
            <param name="propertySelector">Lambda expression which returns the property on the Data Context.</param>
            <returns><see cref="T:RedBadger.Xpf.Presentation.Data.IDualChannel`1">IDualChannel</see> around the property on the Data Context.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateTwoWay``2(RedBadger.Xpf.Presentation.ReactiveProperty{``1,``0})">
            <summary>
                Creates a Two Way Binding to a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on the element's Data Context.
            </summary>
            <remarks>
                When binding to the Data Context, the binding returned is not resolved (ie. connected to the source) until the beginning of the Measure phase.
                This allows for the Data Context to be set after the binding has been created and changed at any time.
            </remarks>
            <typeparam name="TSource">The Type of the Data Context.</typeparam>
            <typeparam name="TProperty">The Type of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on the Data Context.</typeparam>
            <param name="reactiveProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> you're binding to.</param>
            <returns><see cref="T:RedBadger.Xpf.Presentation.Data.IDualChannel`1">IDualChannel</see> around the property on the source.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateTwoWay``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Creates a Two Way Binding to a property on a source.
            </summary>
            <typeparam name="TSource">The Type of the source.</typeparam>
            <typeparam name="TProperty">The Type of the property on the source.</typeparam>
            <param name="source">The binding source.</param>
            <param name="propertySelector">Lambda expression which returns the property on the source.</param>
            <returns><see cref="T:RedBadger.Xpf.Presentation.Data.IDualChannel`1">IDualChannel</see> around the property on the source.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Data.BindingFactory.CreateTwoWay``2(``0,RedBadger.Xpf.Presentation.ReactiveProperty{``1,``0})">
            <summary>
                Creates a Two Way Binding to a <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on a source.
            </summary>
            <typeparam name="TSource">The Type of the source.</typeparam>
            <typeparam name="TProperty">The Type of the <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on the source.</typeparam>
            <param name="source">The binding source.</param>
            <param name="reactiveProperty">The <see cref="T:RedBadger.Xpf.Presentation.ReactiveProperty`2">ReactiveProperty</see> on the source.</param>
            <returns><see cref="T:RedBadger.Xpf.Presentation.Data.IDualChannel`1">IDualChannel</see> around the property on the source.</returns>
        </member>
        <member name="T:RedBadger.Xpf.Presentation.Data.INotifyPropertyChanged">
            <summary>
                Classes that implement this interface can participate in data binding with XPF's Reactive Property System
                Implementors should raise the <see cref="E:RedBadger.Xpf.Presentation.Data.INotifyPropertyChanged.PropertyChanged">PropertyChanged</see> event when a property's value is changed
            </summary>
        </member>
        <member name="E:RedBadger.Xpf.Presentation.Data.INotifyPropertyChanged.PropertyChanged">
            <summary>
                This event is raised then the value of a property is changed
            </summary>
        </member>
        <member name="T:RedBadger.Xpf.Presentation.Data.IDualChannel`1">
            <summary>
                Represents two channels (an <see cref="T:System.IObservable`1">IObservable</see> and an <see cref="T:System.IObserver`1">IObserver</see>)
            </summary>
            <typeparam name="T">The <see cref="T:System.Type">Type</see> of the data in the channels</typeparam>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.Data.IDualChannel`1.Observable">
            <summary>
                The <see cref="T:System.IObservable`1">IObservable</see> channel
            </summary>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.Data.IDualChannel`1.Observer">
            <summary>
                The <see cref="T:System.IObserver`1">IObserver</see> channel
            </summary>
        </member>
        <member name="T:RedBadger.Xpf.Presentation.Controls.Grid">
            <summary>
                A Grid layout panel consisting of columns and rows.
            </summary>
        </member>
        <member name="F:RedBadger.Xpf.Presentation.Controls.Grid.ColumnProperty">
            <summary>
                Column attached property.
            </summary>
        </member>
        <member name="F:RedBadger.Xpf.Presentation.Controls.Grid.RowProperty">
            <summary>
                Row attached property.
            </summary>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Controls.Grid.GetColumn(RedBadger.Xpf.Presentation.IElement)">
            <summary>
                Gets the value of the Column attached property for the specified element.
            </summary>
            <param name = "element">The element for which to read the proerty value.</param>
            <returns>The value of the Column attached property.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Controls.Grid.GetRow(RedBadger.Xpf.Presentation.IElement)">
            <summary>
                Gets the value of the Row attached property for the specified element.
            </summary>
            <param name = "element">The element for which to read the proerty value.</param>
            <returns>The value of the Row attached property.</returns>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Controls.Grid.SetColumn(RedBadger.Xpf.Presentation.IElement,System.Int32)">
            <summary>
                Sets the value of the Column attached property for the specified element.
            </summary>
            <param name = "element">The element for which to write the proerty value.</param>
            <param name = "value">The value of the Column attached property.</param>
        </member>
        <member name="M:RedBadger.Xpf.Presentation.Controls.Grid.SetRow(RedBadger.Xpf.Presentation.IElement,System.Int32)">
            <summary>
                Sets the value of the Row attached property for the specified element.
            </summary>
            <param name = "element">The element for which to write the proerty value.</param>
            <param name = "value">The value of the Row attached property.</param>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.Controls.Grid.ColumnDefinitions">
            <summary>
                Gets the collection of column definitions.
            </summary>
            <value>The column definitions collection.</value>
        </member>
        <member name="P:RedBadger.Xpf.Presentation.Controls.Grid.RowDefinitions">
            <summary>
                Gets the collection of row definitions.
            </summary>
            <value>The row definitions collection.</value>
        </member>
    </members>
</doc>
