//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Media.DrawingContextSpecs
{
    using System;

    using Machine.Specifications;

    using RedBadger.Xpf.Presentation.Media;

    [Subject(typeof(DrawingContext), "State")]
    public class when_close_is_called_and_the_context_is_already_closed : a_DrawingContext
    {
        private static Exception exception;

        private Because of = () => exception = Catch.Exception(() => DrawingContext.Close());

        private It should_throw_an_exception = () => exception.ShouldBeOfType<InvalidOperationException>();
    }

    [Subject(typeof(DrawingContext), "State")]
    public class when_open_is_called_and_the_context_is_already_open : a_DrawingContext
    {
        private static Exception exception;

        private Establish context = () => DrawingContext.Open();

        private Because of = () => exception = Catch.Exception(() => DrawingContext.Open());

        private It should_throw_an_exception = () => exception.ShouldBeOfType<InvalidOperationException>();
    }

    [Subject(typeof(DrawingContext), "State")]
    public class when_open_is_called_after_the_drawing_context_has_been_closed : a_DrawingContext
    {
        private static Exception exception;

        private Establish context = () =>
            {
                DrawingContext.Open();
                DrawingContext.Close();
            };

        private Because of = () => exception = Catch.Exception(() => DrawingContext.Open());

        private It should_not_throw_an_exception = () => exception.ShouldBeNull();
    }

    [Subject(typeof(DrawingContext), "State")]
    public class when_the_drawing_context_is_flushed_whilst_open : a_DrawingContext
    {
        private static Exception exception;

        private Establish context = () => DrawingContext.Open();

        private Because of = () => exception = Catch.Exception(() => DrawingContext.Flush(SpriteBatch.Object));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<InvalidOperationException>();
    }
}