//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Media.Imaging
{
    using System.IO;

    using Machine.Specifications;

    using Microsoft.Xna.Framework;
    using Microsoft.Xna.Framework.Graphics;

    using RedBadger.Xpf.Presentation.Media.Imaging;

    using BitmapImage = System.Windows.Media.Imaging.BitmapImage;

    public abstract class an_XnaImage
    {
        protected static BitmapImage BitmapImage;

        protected static Texture2D Texture;

        private static Game game;

        private Establish context = () =>
            {
                BitmapImage = new BitmapImage();
                BitmapImage.BeginInit();
                BitmapImage.StreamSource = File.OpenRead("badger.jpg");
                BitmapImage.EndInit();
                var bytes = new byte[BitmapImage.PixelWidth * BitmapImage.PixelHeight * 4];
                BitmapImage.CopyPixels(bytes, BitmapImage.PixelWidth * 4, 0);

                Texture = new Texture2D(
                    GraphicsDeviceService.Instance.GraphicsDevice, BitmapImage.PixelWidth, BitmapImage.PixelHeight);
                Texture.SetData(bytes);
            };

        [Subject(typeof(XnaImage))]
        public class when_an_Xna_image_is_instantiated : an_XnaImage
        {
            private static XnaImage XnaImage;

            private Because of = () => { XnaImage = new XnaImage(Texture); };

            private It should_have_a_Height_set = () => XnaImage.Height.ShouldEqual(BitmapImage.PixelHeight);

            private It should_have_a_Pixel_Height_set = () => XnaImage.PixelHeight.ShouldEqual(BitmapImage.PixelHeight);

            private It should_have_a_Pixel_Width_set = () => XnaImage.PixelWidth.ShouldEqual(BitmapImage.PixelWidth);

            private It should_have_a_Width_set = () => XnaImage.Width.ShouldEqual(BitmapImage.PixelWidth);
        }
    }
}