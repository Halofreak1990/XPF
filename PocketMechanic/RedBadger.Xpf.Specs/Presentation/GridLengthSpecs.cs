//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation
{
    using System;

    using Machine.Specifications;

    using RedBadger.Xpf.Presentation;

    public abstract class a_GridLength
    {
        protected static GridLength gridLength;

        private Establish context = () => gridLength = new GridLength();
    }

    [Subject(typeof(GridLength))]
    public class when_initialized
    {
        private static GridLength gridLength;

        private Because of = () => gridLength = new GridLength();

        private It should_default_to_a_unit_type_of_auto = () => gridLength.GridUnitType.ShouldEqual(GridUnitType.Auto);

        private It should_default_to_a_value_of_zero = () => gridLength.Value.ShouldEqual(0f);
    }

    [Subject(typeof(GridLength))]
    public class when_initialized_with_a_value_that_is_not_a_number
    {
        private static Exception exception;

        private Because of = () => exception = Catch.Exception(() => new GridLength(float.NaN));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<ArgumentException>();
    }

    [Subject(typeof(GridLength))]
    public class when_initialized_with_a_value_that_is_infinite
    {
        private static Exception exception;

        private Because of = () => exception = Catch.Exception(() => new GridLength(float.PositiveInfinity));

        private It should_throw_an_exception = () => exception.ShouldBeOfType<ArgumentException>();
    }

    [Subject(typeof(GridLength))]
    public class when_initialized_with_a_value
    {
        private const float ExpectedValue = 10;

        private static GridLength gridLength;

        private Because of = () => gridLength = new GridLength(ExpectedValue);

        private It should_have_a_unit_type_of_pixel = () => gridLength.GridUnitType.ShouldEqual(GridUnitType.Pixel);

        private It should_have_the_value_specified = () => gridLength.Value.ShouldEqual(ExpectedValue);
    }

    [Subject(typeof(GridLength))]
    public class when_initialized_with_a_value_and_a_unit_type_of_auto
    {
        private const float ExpectedValue = 1f;

        private static GridLength gridLength;

        private Because of = () => gridLength = new GridLength(10f, GridUnitType.Auto);

        private It should_have_a_unit_type_of_auto = () => gridLength.GridUnitType.ShouldEqual(GridUnitType.Auto);

        private It should_have_the_value_of_one = () => gridLength.Value.ShouldEqual(ExpectedValue);
    }
}