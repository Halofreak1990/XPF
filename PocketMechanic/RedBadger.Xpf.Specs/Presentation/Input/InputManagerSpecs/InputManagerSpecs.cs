//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Input.InputManagerSpecs
{
    using System;
    using System.Collections.Generic;
    using System.Windows;

    using Machine.Specifications;

    using Moq;
    using Moq.Protected;

    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Presentation.Controls;
    using RedBadger.Xpf.Presentation.Input;
    using RedBadger.Xpf.Presentation.Media;

    using It = Machine.Specifications.It;

    public abstract class a_InputManager
    {
        protected static Mock<ButtonBase> Button;

        protected static Mock<IMouse> Mouse;

        protected static Subject<MouseData> MouseData;

        protected static InputManager inputManager;

        private Establish context = () =>
            {
                var viewPort = new Rect(30, 40, 200, 200);

                var renderer = new Mock<Renderer>(
                    new Mock<ISpriteBatch>().Object, new Mock<IPrimitivesService>().Object) {
                                                                                               CallBase = true 
                                                                                            };
                Mouse = new Mock<IMouse>();
                MouseData = new Subject<MouseData>();
                Mouse.SetupGet(mouse => mouse.MouseData).Returns(MouseData);
                var rootElement = new Mock<RootElement>(viewPort, renderer.Object, Mouse.Object) { CallBase = true };

                Button = new Mock<ButtonBase> { CallBase = true };
                rootElement.Object.Content = Button.Object;
                rootElement.Object.Update();
            };
    }

    [Subject(typeof(InputManager))]
    public class when : a_InputManager
    {
        private const string OnMouseLeftButtonDown = "OnMouseLeftButtonDown";

        private Because of =
            () => MouseData.OnNext(new MouseData { Action = MouseAction.LeftButtonDown, Point = new Point(40, 50) });

        private It should_raise_left_mouse_button_down_event =
            () =>
            Button.Protected().Verify(
                OnMouseLeftButtonDown, Times.Once(), ItExpr.IsAny<MouseButtonEventArgs>());
    }
}