//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Presentation;

    using It = Machine.Specifications.It;

    public abstract class a_UIElementCollection
    {
        protected static Mock<UIElement> child1;

        protected static Mock<UIElement> parent;

        protected static UIElementCollection uIElementCollection;

        private Establish context = () =>
            {
                child1 = new Mock<UIElement>();
                child2 = new Mock<UIElement>();
                parent = new Mock<UIElement>();
                uIElementCollection = new UIElementCollection(parent.Object);
            };

        protected static Mock<UIElement> child2;
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_adding_an_element_to : a_UIElementCollection
    {
        private Because of = () => uIElementCollection.Add(child1.Object);

        private It should_set_the_elements_visual_parent =
            () => child1.Object.VisualParent.ShouldBeTheSameAs(parent.Object);
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_setting_an_element_in : a_UIElementCollection
    {
        private Establish context = () => uIElementCollection.Add(child1.Object);

        private Because of = () => uIElementCollection[0] = child2.Object;

        private It should_set_the_elements_visual_parent =
            () => child2.Object.VisualParent.ShouldBeTheSameAs(parent.Object);

        private It should_unset_the_old_elements_visual_parent =
            () => child1.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_removing_an_element_from : a_UIElementCollection
    {
        private Establish context = () => uIElementCollection.Add(child1.Object);

        private Because of = () => uIElementCollection.Remove(child1.Object);

        private It should_unset_the_elements_visual_parent = () => child1.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_removing_an_element_at_a_certain_position_from : a_UIElementCollection
    {
        private Establish context = () => uIElementCollection.Add(child1.Object);

        private Because of = () => uIElementCollection.RemoveAt(0);

        private It should_unset_the_elements_visual_parent = () => child1.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_inserting_an_element_into : a_UIElementCollection
    {
        private Because of = () => uIElementCollection.Insert(0, child1.Object);

        private It should_set_the_elements_visual_parent =
            () => child1.Object.VisualParent.ShouldBeTheSameAs(parent.Object);
    }
}