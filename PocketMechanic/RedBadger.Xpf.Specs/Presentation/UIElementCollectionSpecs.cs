//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Presentation;

    using It = Machine.Specifications.It;

    public abstract class a_UIElementCollection
    {
        protected static Mock<UIElement> Child1;

        protected static Mock<UIElement> Child2;

        protected static Mock<UIElement> Owner;

        protected static UIElementCollection UIElementCollection;

        private Establish context = () =>
            {
                Child1 = new Mock<UIElement> { CallBase = true };
                Child2 = new Mock<UIElement> { CallBase = true };
                Owner = new Mock<UIElement> { CallBase = true };

                UIElementCollection = new UIElementCollection(Owner.Object);
            };
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_adding_an_element_to : a_UIElementCollection
    {
        private Establish context = () => Owner.Object.Measure(Size.Empty);

        private Because of = () => UIElementCollection.Add(Child1.Object);

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_set_the_elements_visual_parent =
            () => Child1.Object.VisualParent.ShouldBeTheSameAs(Owner.Object);
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_setting_an_element_in : a_UIElementCollection
    {
        private Establish context = () =>
            {
                UIElementCollection.Add(Child1.Object);

                Owner.Object.Measure(Size.Empty);
            };

        private Because of = () => UIElementCollection[0] = Child2.Object;

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_set_the_elements_visual_parent =
            () => Child2.Object.VisualParent.ShouldBeTheSameAs(Owner.Object);

        private It should_unset_the_old_elements_visual_parent = () => Child1.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_removing_an_element_from : a_UIElementCollection
    {
        private Establish context = () =>
            {
                UIElementCollection.Add(Child1.Object);

                Owner.Object.Measure(Size.Empty);
            };

        private Because of = () => UIElementCollection.Remove(Child1.Object);

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_unset_the_elements_visual_parent = () => Child1.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_removing_an_element_at_a_certain_position_from : a_UIElementCollection
    {
        private Establish context = () =>
            {
                UIElementCollection.Add(Child1.Object);

                Owner.Object.Measure(Size.Empty);
            };

        private Because of = () => UIElementCollection.RemoveAt(0);

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_unset_the_elements_visual_parent = () => Child1.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(UIElementCollection), "Visual Parent")]
    public class when_inserting_an_element_into : a_UIElementCollection
    {
        private Establish context = () => Owner.Object.Measure(Size.Empty);

        private Because of = () => UIElementCollection.Insert(0, Child1.Object);

        private It should_invalidate_its_owners_measure = () => Owner.Object.IsMeasureValid.ShouldBeFalse();

        private It should_set_the_elements_visual_parent =
            () => Child1.Object.VisualParent.ShouldBeTheSameAs(Owner.Object);
    }
}