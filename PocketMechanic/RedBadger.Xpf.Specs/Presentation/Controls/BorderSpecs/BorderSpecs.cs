//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Controls.BorderSpecs
{
    using Machine.Specifications;

    using Microsoft.Xna.Framework;

    using Moq;

    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Presentation;
    using RedBadger.Xpf.Presentation.Controls;
    using RedBadger.Xpf.Presentation.Media;

    using It = Machine.Specifications.It;

    public abstract class a_Border
    {
        protected static Border Border;

        private Establish context = () => { Border = new Border(); };
    }

    public abstract class a_Border_with_child : a_Border
    {
        protected static readonly Size AvailableSize = new Size(200, 200);

        protected static Mock<UIElement> Child;

        protected static Size ChildSize;

        protected static IRenderer Renderer;

        protected static Mock<ISpriteBatch> SpriteBatch;

        private Cleanup after = () => XpfServiceLocator.Get<IRenderer>().Clear();

        private Establish context = () =>
            {
                XpfServiceLocator.RegisterPrimitiveService(new Mock<IPrimitivesService>().Object);
                Renderer = XpfServiceLocator.Get<IRenderer>();

                SpriteBatch = new Mock<ISpriteBatch>();

                ChildSize = new Size(15, 35);
                Child = new Mock<UIElement> { CallBase = true };
                Child.Object.HorizontalAlignment = HorizontalAlignment.Left;
                Child.Object.VerticalAlignment = VerticalAlignment.Top;
                Child.Object.Width = ChildSize.Width;
                Child.Object.Height = ChildSize.Height;

                Border.Child = Child.Object;
            };
    }

    [Subject(typeof(Border))]
    public class when_initialized : a_Border
    {
        private It should_have_no_background = () => Border.Background.ShouldBeNull();

        private It should_have_no_border_brush = () => Border.BorderBrush.ShouldBeNull();

        private It should_have_no_padding = () => Border.Padding.ShouldEqual(Thickness.Empty);

        private It should_have_no_thickness = () => Border.BorderThickness.ShouldEqual(Thickness.Empty);
    }

    [Subject(typeof(Border))]
    public class when_used_in_its_default_state : a_Border_with_child
    {
        private Because of = () =>
            {
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));
                Renderer.Draw(SpriteBatch.Object);
            };

        private It should_have_no_effect_on_its_child = () => Child.Object.VisualOffset.ShouldEqual(Vector2.Zero);

        private It should_set_itself_as_the_visual_parent_on_the_child =
            () => Child.Object.VisualParent.ShouldEqual(Border);
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_padding_is_specified : a_Border_with_child
    {
        private static readonly Thickness padding = new Thickness(10, 20, 30, 40);

        private Because of = () =>
            {
                Border.Padding = padding;
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));
            };

        private It should_increase_the_desired_size =
            () =>
            Border.DesiredSize.ShouldEqual(
                new Size(
                ChildSize.Width + padding.Left + padding.Right, ChildSize.Height + padding.Top + padding.Bottom));

        private It should_take_padding_into_account_when_drawing =
            () => Child.Object.VisualOffset.ShouldEqual(new Vector2(padding.Left, padding.Top));
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_padding_is_changed : a_Border_with_child
    {
        private Establish context = () =>
            {
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));
            };

        private Because of = () => Border.Padding = new Thickness(10, 20, 30, 40);

        private It should_invalidate_measure = () => Border.IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_thickness_is_specified : a_Border_with_child
    {
        private static readonly Thickness thickness = new Thickness(1, 2, 3, 4);

        private Because of = () =>
            {
                Border.BorderThickness = thickness;
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));
            };

        private It should_increase_the_desired_size =
            () =>
            Border.DesiredSize.ShouldEqual(
                new Size(
                ChildSize.Width + thickness.Left + thickness.Right, ChildSize.Height + thickness.Top + thickness.Bottom));

        private It should_take_padding_into_account_when_drawing =
            () => Child.Object.VisualOffset.ShouldEqual(new Vector2(thickness.Left, thickness.Top));
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_thickness_is_changed : a_Border_with_child
    {
        private Establish context = () =>
            {
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));
            };

        private Because of = () => Border.BorderThickness = new Thickness(1, 2, 3, 4);

        private It should_invalidate_measure = () => Border.IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_padding_and_thickness_are_specified : a_Border_with_child
    {
        private static readonly Thickness padding = new Thickness(10, 20, 30, 40);

        private static readonly Thickness thickness = new Thickness(1, 2, 3, 4);

        private Because of = () =>
            {
                Border.Padding = padding;
                Border.BorderThickness = thickness;
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));
            };

        private It should_increase_the_desired_size =
            () =>
            Border.DesiredSize.ShouldEqual(
                new Size(
                ChildSize.Width + padding.Left + padding.Right + thickness.Left + thickness.Right, 
                ChildSize.Height + padding.Top + padding.Bottom + thickness.Top + thickness.Bottom));

        private It should_take_padding_into_account_when_drawing =
            () =>
            Child.Object.VisualOffset.ShouldEqual(
                new Vector2(padding.Left + thickness.Left, padding.Top + thickness.Top));
    }

    [Subject(typeof(Border), "Rendering")]
    public class when_a_border_thickness_and_brush_have_been_specified : a_Border_with_child
    {
        private static readonly Rect expectedBottomBorderRectangle = new Rect(1, 37, 15, 4);

        private static readonly Color expectedColor = Color.Red;

        private static readonly Rect expectedLeftBorderRectangle = new Rect(0, 0, 1, 41);

        private static readonly Rect expectedRightBorderRectangle = new Rect(16, 2, 3, 39);

        private static readonly Rect expectedTopBorderRectangle = new Rect(1, 0, 18, 2);

        private static readonly Thickness thickness = new Thickness(1, 2, 3, 4);

        private Establish context = () =>
            {
                Border.HorizontalAlignment = HorizontalAlignment.Left;
                Border.VerticalAlignment = VerticalAlignment.Top;
            };

        private Because of = () =>
            {
                Border.BorderBrush = new SolidColorBrush(expectedColor);
                Border.BorderThickness = thickness;
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));

                Renderer.Draw(SpriteBatch.Object);
            };

        private It should_draw_the_bottom_border =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture2D>(), expectedBottomBorderRectangle, expectedColor));

        private It should_draw_the_left_border =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture2D>(), expectedLeftBorderRectangle, expectedColor));

        private It should_draw_the_right_border =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture2D>(), expectedRightBorderRectangle, expectedColor));

        private It should_draw_the_top_border =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture2D>(), expectedTopBorderRectangle, expectedColor));
    }

    [Subject(typeof(Border), "Rendering")]
    public class when_no_border_brush_has_been_specified : a_Border_with_child
    {
        private Because of = () =>
            {
                Border.BorderThickness = new Thickness(1, 2, 3, 4);
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));

                Renderer.Draw(SpriteBatch.Object);
            };

        private It should_not_render_a_border =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture2D>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()), 
                Times.Never());
    }

    [Subject(typeof(Border), "Rendering")]
    public class when_no_thickness_has_been_specified : a_Border_with_child
    {
        private Because of = () =>
            {
                Border.BorderBrush = new SolidColorBrush(Color.Black);
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));

                Renderer.Draw(SpriteBatch.Object);
            };

        private It should_not_render_a_border =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture2D>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()), 
                Times.Never());
    }

    [Subject(typeof(Border), "Background")]
    public class when_background_is_not_specified : a_Border_with_child
    {
        private Because of = () =>
            {
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));

                Renderer.Draw(SpriteBatch.Object);
            };

        private It should_not_render_a_background =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture2D>(), Moq.It.IsAny<Rect>(), Moq.It.IsAny<Color>()), 
                Times.Never());
    }

    [Subject(typeof(Border), "Background")]
    public class when_background_is_specified : a_Border_with_child
    {
        private static readonly SolidColorBrush expectedBackground = new SolidColorBrush(Color.Blue);

        private Because of = () =>
            {
                Border.Background = expectedBackground;
                Border.Measure(AvailableSize);
                Border.Arrange(new Rect(Vector2.Zero, AvailableSize));

                Renderer.Draw(SpriteBatch.Object);
            };

        private It should_render_the_background_in_the_right_place = () =>
            {
                var area = new Rect(
                    Border.VisualOffset.X, Border.VisualOffset.Y, Border.ActualWidth, Border.ActualHeight);

                SpriteBatch.Verify(
                    batch =>
                    batch.Draw(
                        Moq.It.IsAny<ITexture2D>(), Moq.It.Is<Rect>(rect => rect.Equals(area)), Moq.It.IsAny<Color>()));
            };

        private It should_render_with_the_specified_background_color =
            () =>
            SpriteBatch.Verify(
                batch => batch.Draw(Moq.It.IsAny<ITexture2D>(), Moq.It.IsAny<Rect>(), expectedBackground.Color));
    }
}