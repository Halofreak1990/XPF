//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Controls.BorderSpecs
{
    using System.Windows;
    using System.Windows.Media;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Presentation;
    using RedBadger.Xpf.Presentation.Controls;

    using Brush = RedBadger.Xpf.Presentation.Media.Brush;
    using It = Machine.Specifications.It;
    using SolidColorBrush = RedBadger.Xpf.Presentation.Media.SolidColorBrush;
    using Vector = RedBadger.Xpf.Presentation.Vector;

    [Subject(typeof(Border))]
    public class when_initialized : a_Border
    {
        private It should_have_no_background = () => Border.Background.ShouldBeNull();

        private It should_have_no_border_brush = () => Border.BorderBrush.ShouldBeNull();

        private It should_have_no_padding = () => Border.Padding.ShouldEqual(new Thickness());

        private It should_have_no_thickness = () => Border.BorderThickness.ShouldEqual(new Thickness());
    }

    [Subject(typeof(Border))]
    public class when_used_in_its_default_state : a_Border_with_child
    {
        private Because of = () => RootElement.Object.Update();

        private It should_have_no_effect_on_its_child = () => Child.Object.VisualOffset.ShouldEqual(Vector.Zero);

        private It should_set_itself_as_the_visual_parent_on_the_child =
            () => Child.Object.VisualParent.ShouldEqual(Border);
    }

    [Subject(typeof(Border))]
    public class when_content_is_changed : a_Border_with_child
    {
        private Because of = () => Border.Child = new Mock<IElement>().Object;

        private It should_unset_itself_as_the_parent_of_the_outgoing_child =
            () => Child.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_padding_is_specified : a_Border_with_child
    {
        private static readonly Thickness padding = new Thickness(10, 20, 30, 40);

        private Because of = () =>
            {
                Border.Padding = padding;
                RootElement.Object.Update();
            };

        private It should_increase_the_desired_size =
            () =>
            Border.DesiredSize.ShouldEqual(
                new Size(
                ChildSize.Width + padding.Left + padding.Right, ChildSize.Height + padding.Top + padding.Bottom));

        private It should_take_padding_into_account_when_drawing =
            () => Child.Object.VisualOffset.ShouldEqual(new Vector(padding.Left, padding.Top));
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_padding_is_changed : a_Border_with_child
    {
        private Establish context = () => RootElement.Object.Update();

        private Because of = () => Border.Padding = new Thickness(10, 20, 30, 40);

        private It should_invalidate_measure = () => Border.IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_thickness_is_specified : a_Border_with_child
    {
        private static readonly Thickness thickness = new Thickness(1, 2, 3, 4);

        private Because of = () =>
            {
                Border.BorderThickness = thickness;
                RootElement.Object.Update();
            };

        private It should_increase_the_desired_size =
            () =>
            Border.DesiredSize.ShouldEqual(
                new Size(
                ChildSize.Width + thickness.Left + thickness.Right, ChildSize.Height + thickness.Top + thickness.Bottom));

        private It should_take_padding_into_account_when_drawing =
            () => Child.Object.VisualOffset.ShouldEqual(new Vector(thickness.Left, thickness.Top));
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_thickness_is_changed : a_Border_with_child
    {
        private Establish context = () => RootElement.Object.Update();

        private Because of = () => Border.BorderThickness = new Thickness(1, 2, 3, 4);

        private It should_invalidate_measure = () => Border.IsMeasureValid.ShouldBeFalse();
    }

    [Subject(typeof(Border), "Padding/Thickness")]
    public class when_padding_and_thickness_are_specified : a_Border_with_child
    {
        private static readonly Thickness padding = new Thickness(10, 20, 30, 40);

        private static readonly Thickness thickness = new Thickness(1, 2, 3, 4);

        private Because of = () =>
            {
                Border.Padding = padding;
                Border.BorderThickness = thickness;
                RootElement.Object.Update();
            };

        private It should_increase_the_desired_size =
            () =>
            Border.DesiredSize.ShouldEqual(
                new Size(
                ChildSize.Width + padding.Left + padding.Right + thickness.Left + thickness.Right, 
                ChildSize.Height + padding.Top + padding.Bottom + thickness.Top + thickness.Bottom));

        private It should_take_padding_into_account_when_drawing =
            () =>
            Child.Object.VisualOffset.ShouldEqual(
                new Vector(padding.Left + thickness.Left, padding.Top + thickness.Top));
    }

    [Subject(typeof(Border), "Rendering")]
    public class when_a_border_thickness_and_brush_have_been_specified : a_Border_with_child
    {
        private static readonly Rect expectedBottomBorderRectangle = new Rect(1, 37, 15, 4);

        private static readonly Rect expectedLeftBorderRectangle = new Rect(0, 0, 1, 41);

        private static readonly Rect expectedRightBorderRectangle = new Rect(16, 2, 3, 39);

        private static readonly Rect expectedTopBorderRectangle = new Rect(1, 0, 18, 2);

        private static readonly Thickness thickness = new Thickness(1, 2, 3, 4);

        private static SolidColorBrush expectedBrush;

        private Establish context = () =>
            {
                Border.HorizontalAlignment = HorizontalAlignment.Left;
                Border.VerticalAlignment = VerticalAlignment.Top;
            };

        private Because of = () =>
            {
                expectedBrush = new SolidColorBrush(Colors.Red);
                Border.BorderBrush = expectedBrush;
                Border.BorderThickness = thickness;
                RootElement.Object.Update();
            };

        private It should_draw_the_bottom_border =
            () =>
            DrawingContext.Verify(
                drawingContext => drawingContext.DrawRectangle(expectedBottomBorderRectangle, expectedBrush));

        private It should_draw_the_left_border =
            () =>
            DrawingContext.Verify(
                drawingContext => drawingContext.DrawRectangle(expectedLeftBorderRectangle, expectedBrush));

        private It should_draw_the_right_border =
            () =>
            DrawingContext.Verify(
                drawingContext => drawingContext.DrawRectangle(expectedRightBorderRectangle, expectedBrush));

        private It should_draw_the_top_border =
            () =>
            DrawingContext.Verify(
                drawingContext => drawingContext.DrawRectangle(expectedTopBorderRectangle, expectedBrush));
    }

    [Subject(typeof(Border), "Rendering")]
    public class when_no_border_brush_has_been_specified : a_Border_with_child
    {
        private Because of = () =>
            {
                Border.BorderThickness = new Thickness(1, 2, 3, 4);
                RootElement.Object.Update();
            };

        private It should_not_render_a_border =
            () =>
            DrawingContext.Verify(
                drawingContext => drawingContext.DrawRectangle(Moq.It.IsAny<Rect>(), Moq.It.IsAny<Brush>()), 
                Times.Never());
    }

    [Subject(typeof(Border), "Rendering")]
    public class when_no_thickness_has_been_specified : a_Border_with_child
    {
        private Because of = () =>
            {
                Border.BorderBrush = new SolidColorBrush(Colors.Black);
                RootElement.Object.Update();
            };

        private It should_not_render_a_border =
            () =>
            DrawingContext.Verify(
                drawingContext => drawingContext.DrawRectangle(Moq.It.IsAny<Rect>(), Moq.It.IsAny<Brush>()), 
                Times.Never());
    }

    [Subject(typeof(Border), "Background")]
    public class when_background_is_not_specified : a_Border_with_child
    {
        private Because of = () => RootElement.Object.Update();

        private It should_not_render_a_background =
            () =>
            DrawingContext.Verify(
                drawingContext => drawingContext.DrawRectangle(Moq.It.IsAny<Rect>(), Moq.It.IsAny<Brush>()), 
                Times.Never());
    }

    [Subject(typeof(Border), "Background")]
    public class when_background_is_specified : a_Border_with_child
    {
        private static readonly SolidColorBrush expectedBackground = new SolidColorBrush(Colors.Blue);

        private Because of = () =>
            {
                Border.Background = expectedBackground;
                RootElement.Object.Update();
            };

        private It should_render_the_background_in_the_right_place = () =>
            {
                var area = new Rect(
                    Border.VisualOffset.X, Border.VisualOffset.Y, Border.ActualWidth, Border.ActualHeight);

                DrawingContext.Verify(
                    drawingContext =>
                    drawingContext.DrawRectangle(Moq.It.Is<Rect>(rect => rect.Equals(area)), Moq.It.IsAny<Brush>()));
            };

        private It should_render_with_the_specified_background_color =
            () =>
            DrawingContext.Verify(
                drawingContext => drawingContext.DrawRectangle(Moq.It.IsAny<Rect>(), expectedBackground));
    }

    [Subject(typeof(Border), "BorderBrush")]
    public class when_the_border_brush_is_changed : a_Border_with_child
    {
        private Establish context = () => RootElement.Object.Update();

        private Because of = () => Border.BorderBrush = new SolidColorBrush(Colors.AliceBlue);

        private It should_invalidate_arrange = () => Border.IsArrangeValid.ShouldBeFalse();
    }
}