//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Controls
{
    using Machine.Specifications;

    using Microsoft.Xna.Framework.Graphics;

    using RedBadger.Xpf.Presentation;
    using RedBadger.Xpf.Presentation.Controls;
    using RedBadger.Xpf.Presentation.Media.Imaging;
    using RedBadger.Xpf.Specs.Services;

    using StructureMap;

    public abstract class an_Image : a_spec_dependent_on_services
    {
        protected static Texture2D Texture;

        protected static Image Image;

        private Establish context = () =>
            {
                Texture = ObjectFactory.GetInstance<Texture2DService>().Badger;
                Image = new Image { Source = new XnaImage(Texture) };
            };
    }

    [Subject(typeof(Image))]
    public class when_an_xna_image_is_measured : an_Image
    {
        private static readonly Size availableSize = new Size(1000, 1000);

        private Because of = () => Image.Measure(availableSize);

        private It should_have_a_desired_size_equal_to_that_of_the_image_source =
            () => Image.DesiredSize.ShouldEqual(new Size(Texture.Width, Texture.Height));
    }
}