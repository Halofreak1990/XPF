//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Controls.ItemsControlSpecs
{
    using System.Collections.Generic;
    using System.Windows;
    using System.Windows.Data;
    using System.Windows.Media;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Graphics;
    using RedBadger.Xpf.Presentation.Controls;

    using It = Machine.Specifications.It;

    public abstract class a_ItemsControl
    {
        protected static ItemsControl ItemsControl;

        private Establish context = () => ItemsControl = new ItemsControl();
    }

    [Subject(typeof(ItemsControl), "")]
    public class when_a_panel_is_not_specified : a_ItemsControl
    {
        private It should_use_a_stack_panel = () => ItemsControl.ItemsPanel.ShouldBeOfType<StackPanel>();
    }

    [Subject(typeof(ItemsControl), "")]
    public class when_items_source_is_set_to_a_list_of_two_items_and_item_template_is_a_text_block : a_ItemsControl
    {
        private static IList<Color> items;

        private Establish context = () => items = new List<Color> { Colors.Blue, Colors.Red };

        private Because of = () =>
            {
                ItemsControl.ItemsSource = items;
                ItemsControl.ItemTemplate = () =>
                    {
                        var textBlock = new TextBlock(new Mock<ISpriteFont>().Object);
                        textBlock.SetBinding(TextBlock.TextProperty, new Binding());
                        return textBlock;
                    };

                ItemsControl.Measure(new Size(100, 100));
                ItemsControl.Arrange(new Rect(0, 0, 100, 100));
            };

        private It should_lay_out_item_1_as_using_a_text_block =
            () => ItemsControl.ItemsPanel.Children[0].ShouldBeOfType<TextBlock>();

        private It should_lay_out_item_2_as_using_a_text_block =
            () => ItemsControl.ItemsPanel.Children[1].ShouldBeOfType<TextBlock>();

        private It should_set_the_data_context_of_item_1 =
            () => ItemsControl.ItemsPanel.Children[0].DataContext.ShouldEqual(Colors.Blue);

        private It should_set_the_data_context_of_item_2 =
            () => ItemsControl.ItemsPanel.Children[1].DataContext.ShouldEqual(Colors.Red);

        private It should_use_the_ToString_value_of_item_1 =
            () => ((TextBlock)ItemsControl.ItemsPanel.Children[0]).Text.ShouldEqual(Colors.Blue.ToString());

        private It should_use_the_ToString_value_of_item_2 =
            () => ((TextBlock)ItemsControl.ItemsPanel.Children[1]).Text.ShouldEqual(Colors.Red.ToString());
    }
}