//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Controls.ItemsControlSpecs
{
    using System.Linq;
    using System.Windows;

    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Presentation.Controls;

    using It = Machine.Specifications.It;

    [Subject(typeof(ItemsControl))]
    public class when_a_panel_is_set : a_ItemsControl
    {
        private static Mock<Panel> panel;

        private Establish context = () =>
            {
                ItemsControl.Measure(Size.Empty);
                panel = new Mock<Panel>();
            };

        private Because of = () => ItemsControl.ItemsPanel = panel.Object;

        private It should_invalidate_measure = () => ItemsControl.IsMeasureValid.ShouldBeFalse();

        private It should_mark_itself_as_the_visual_parent =
            () => ItemsControl.ItemsPanel.VisualParent.ShouldBeTheSameAs(ItemsControl);

        private It should_return_the_correct_number_of_panels_when_its_children_are_requested =
            () => ItemsControl.GetChildren().Count().ShouldEqual(1);

        private It should_return_the_panel_when_its_children_are_requested =
            () => ItemsControl.GetChildren().First().ShouldBeTheSameAs(panel.Object);
    }

    [Subject(typeof(ItemsControl))]
    public class when_panel_is_changed : a_ItemsControl
    {
        private static Mock<Panel> oldPanel;

        private Establish context = () =>
            {
                oldPanel = new Mock<Panel> { CallBase = true };
                ItemsControl.ItemsPanel = oldPanel.Object;
            };

        private Because of = () => ItemsControl.ItemsPanel = new Mock<Panel>().Object;

        private It should_unset_itself_as_the_parent_of_the_outgoing_panel =
            () => oldPanel.Object.VisualParent.ShouldBeNull();
    }

    [Subject(typeof(ItemsControl))]
    public class when_the_default_panel_is_used : a_ItemsControl
    {
        private It should_mark_itself_as_the_visual_parent =
            () => ItemsControl.ItemsPanel.VisualParent.ShouldBeTheSameAs(ItemsControl);
    }
}