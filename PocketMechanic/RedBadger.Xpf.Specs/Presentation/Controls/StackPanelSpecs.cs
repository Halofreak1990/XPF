//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

namespace RedBadger.Xpf.Specs.Presentation.Controls
{
    using Machine.Specifications;

    using Moq;

    using RedBadger.Xpf.Presentation;
    using RedBadger.Xpf.Presentation.Controls;

    using It = Machine.Specifications.It;

    public abstract class a_StackPanel
    {
        protected static StackPanel stackPanel;

        private Establish context = () => stackPanel = new StackPanel();
    }

    public abstract class a_StackPanel_with_2_children : a_StackPanel
    {
        protected const float ElementHeight = 100f;

        protected const float ElementWidth = 200f;

        protected static readonly Size availableSize = new Size(500, 500);

        protected static Mock<UIElement> child1;

        protected static Mock<UIElement> child2;

        private Establish context = () =>
            {
                child1 = new Mock<UIElement> { CallBase = true };
                child2 = new Mock<UIElement> { CallBase = true };

                child1.Object.Width = child2.Object.Width = ElementWidth;
                child1.Object.Height = child2.Object.Height = ElementHeight;

                stackPanel.Children.Add(child1.Object);
                stackPanel.Children.Add(child2.Object);
            };
    }

    public abstract class a_measured_StackPanel_with_2_children : a_StackPanel_with_2_children
    {
        private Establish context = () => stackPanel.Measure(availableSize);
    }

    [Subject(typeof(StackPanel), "Layout")]
    public class when_measured_with_vertical_orientation : a_StackPanel_with_2_children
    {
        private Because of = () =>
            {
                stackPanel.Orientation = Orientation.Vertical;
                stackPanel.Measure(availableSize);
            };

        private It should_have_a_bigger_desired_height =
            () => stackPanel.DesiredSize.Height.ShouldEqual(ElementHeight * 2);

        private It should_have_the_same_desired_width = () => stackPanel.DesiredSize.Width.ShouldEqual(ElementWidth);
    }

    [Subject(typeof(StackPanel), "Layout")]
    public class when_measured_with_horizontal_orientation : a_StackPanel_with_2_children
    {
        private Because of = () =>
            {
                stackPanel.Orientation = Orientation.Horizontal;
                stackPanel.Measure(availableSize);
            };

        private It should_have_a_bigger_desired_width = () => stackPanel.DesiredSize.Width.ShouldEqual(ElementWidth * 2);

        private It should_have_the_same_desired_height = () => stackPanel.DesiredSize.Height.ShouldEqual(ElementHeight);
    }

    [Subject(typeof(StackPanel), "Layout")]
    public class when_arranged_with_vertical_orientation : a_measured_StackPanel_with_2_children
    {
        private Because of = () =>
            {
                stackPanel.Orientation = Orientation.Vertical;
                stackPanel.Arrange(new Rect(availableSize));
            };

        private It should_layout_the_2nd_child_at_the_same_horizontal_position =
            () => child2.Object.VisualOffset.X.ShouldEqual(child1.Object.VisualOffset.X);

        private It should_layout_the_2nd_child_below_the_first =
            () => child2.Object.VisualOffset.Y.ShouldEqual(child1.Object.VisualOffset.Y + ElementHeight);
    }

    [Subject(typeof(StackPanel), "Layout")]
    public class when_arranged_with_horizontal_orientation : a_measured_StackPanel_with_2_children
    {
        private Because of = () =>
            {
                stackPanel.Orientation = Orientation.Horizontal;
                stackPanel.Arrange(new Rect(availableSize));
            };

        private It should_layout_the_2nd_child_to_the_right_of_the_first =
            () => child2.Object.VisualOffset.X.ShouldEqual(child1.Object.VisualOffset.X + ElementWidth);

        private It should_layout_the_2nd_child_at_the_same_vertical_position =
            () => child2.Object.VisualOffset.Y.ShouldEqual(child1.Object.VisualOffset.Y);
    }
}